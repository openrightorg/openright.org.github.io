diff -ru asap-0.2.1/asap/asap2wav.c asap-0.2.1-typerio/asap/asap2wav.c
--- asap-0.2.1/asap/asap2wav.c	2006-01-21 00:48:03.000000000 -0800
+++ asap-0.2.1-typerio/asap/asap2wav.c	2006-12-08 08:38:53.000000000 -0800
@@ -44,6 +44,8 @@
 static unsigned int frequency = 44100;
 static unsigned int seconds = 180;
 static unsigned int use_16bit = 1;
+static unsigned int use_alsa = 0;
+static unsigned int reg_only = 0;
 
 static int set_output(const char *s)
 {
@@ -93,6 +95,7 @@
 {
 	unsigned int newmin;
 	const char *p;
+	if (s[0] == '-') return -1;
 	if (s[0] < '0' || s[0] > '9') {
 		print_error("invalid time format");
 		return 1;
@@ -144,6 +147,7 @@
 		{ "rate=", set_frequency }
 	};
 	int i;
+	int wav = 1;
 	int files_processed = 0;
 	for (i = 1; i < argc; i++) {
 		const char *arg = argv[i];
@@ -170,6 +174,16 @@
 			}
 			if (j < sizeof(param_opts) / sizeof(param_opts[0]))
 				continue;
+			if (strcmp(arg, "-a") == 0 || strcmp(arg, "--use-alsa") == 0) {
+				use_alsa = 1;
+				wav = 0;
+				continue;
+			}
+			if (strcmp(arg, "-R") == 0 || strcmp(arg, "--reg-only") == 0) {
+				reg_only = 1;
+				wav = 0;
+				continue;
+			}
 			if (strcmp(arg, "-b") == 0 || strcmp(arg, "--byte-samples") == 0) {
 				use_16bit = 0;
 				continue;
@@ -195,6 +209,8 @@
 					"-q QUALITY  --quality=QUALITY  Set sound quality 0-3 (default: 1)\n"
 					"-b          --byte-samples     Output 8-bit samples\n"
 					"-w          --word-samples     Output 16-bit samples (default)\n"
+					"-a          --use-alsa		Output using alsa\n"
+					"-R          --output as SAP-R data\n"
 					"-h          --help             Display this information and exit\n"
 					"-v          --version          Display version information and exit\n"
 				);
@@ -216,6 +232,9 @@
 			unsigned int bytes_per_second;
 			unsigned int n_bytes;
 			static unsigned char buffer[8192];
+
+			ASAP_SetZeroLimit(30);
+
 			if (strlen(arg) >= FILENAME_MAX) {
 				print_error("filename too long");
 				return 1;
@@ -251,6 +270,9 @@
 				sprintf(output_default, "%.*s.wav", (int) (dot - arg), arg);
 				output_file = output_default;
 			}
+			if(use_alsa)
+				 fp = popen("aplay -r 44100 -f S16_LE -t raw", "w");	
+			else
 			fp = fopen(output_file, "wb");
 			if (fp == NULL) {
 				print_error("cannot write %s", output_file);
@@ -260,6 +282,8 @@
 			block_size = channels << use_16bit;
 			bytes_per_second = frequency * block_size;
 			n_bytes = seconds * bytes_per_second;
+			if(wav)
+			{
 			fwrite("RIFF", 1, 4, fp);
 			fput32(n_bytes + 36, fp);
 			fwrite("WAVEfmt \x10\0\0\0\1\0", 1, 14, fp);
@@ -270,17 +294,29 @@
 			fput16(8 << use_16bit, fp);
 			fwrite("data", 1, 4, fp);
 			fput32(n_bytes, fp);
-			while (n_bytes > sizeof(buffer)) {
-				ASAP_Generate(buffer, sizeof(buffer));
-				if (fwrite(buffer, 1, sizeof(buffer), fp) != sizeof(buffer)) {
+			}
+			if(reg_only)
+			{
+				ASAP_set_reg_output();
+
+				fprintf(fp, 
+				"SAP\r\nTYPE R\r\nFASTPLAY %u\r\n%s\r\n", ASAP_get_fastplay(), ASAP_get_stereo() ? "STEREO\r\n": "");
+				n_bytes = (1 + ASAP_get_stereo()) * 9 * 50 * seconds;
+			}
+			while (n_bytes > 0 || ASAP_get_type() == 'R') {
+				int n = ASAP_Generate(buffer, 
+					n_bytes < sizeof(buffer) ?
+					n_bytes : sizeof(buffer)
+					 );
+				if(n == 0) break;
+
+				if (fwrite(buffer, 1, n, fp) != n) {
 					fclose(fp);
 					print_error("error writing to %s", output_file);
 					return 1;
 				}
-				n_bytes -= sizeof(buffer);
+				n_bytes -= n;
 			}
-			ASAP_Generate(buffer, n_bytes);
-			fwrite(buffer, 1, n_bytes, fp);
 			fclose(fp);
 			output_file = NULL;
 			files_processed++;
diff -ru asap-0.2.1/asap/asap.c asap-0.2.1-typerio/asap/asap.c
--- asap-0.2.1/asap/asap.c	2006-01-21 00:52:35.000000000 -0800
+++ asap-0.2.1-typerio/asap/asap.c	2006-12-08 08:43:59.000000000 -0800
@@ -47,6 +47,7 @@
 #define ASAP_MAIN_CLOCK  1773447U
 
 UBYTE memory[65536 + 2];
+UBYTE music_data[65536 + 2];
 
 int xpos = 0;
 int xpos_limit = 0;
@@ -274,13 +275,20 @@
 }
 
 static char sap_type;
-static UWORD sap_player;
-static UWORD sap_music;
-static UWORD sap_init;
+static UWORD sap_player = 0;
+static UWORD sap_music = 0;
+static unsigned int sap_music_audctl = 0;
+static UWORD sap_music_offset = 0;
+static UWORD sap_music_length = 0;
+static unsigned int sap_music_audsize = 9;
+static UWORD sap_init = 0;
 static unsigned int sap_stereo;
 static unsigned int sap_songs;
 static unsigned int sap_defsong;
-static unsigned int sap_fastplay;
+static unsigned int sap_fastplay = 312;
+static unsigned int sap_reg_output = 0;
+static int sap_zero = 0;
+static int sap_zero_limit = -1;
 
 /* This array maps subsong numbers to track positions for MPT and RMT formats. */
 static UBYTE song_pos[128];
@@ -288,11 +296,13 @@
 static unsigned int tmc_per_frame;
 static unsigned int tmc_per_frame_counter;
 
-static unsigned int blockclocks;
-static unsigned int blockclocks_per_player;
-
 static const unsigned int perframe2fastplay[] = { 312U, 312U / 2U, 312U / 3U, 312U / 4U };
 
+int ASAP_get_fastplay() { return sap_fastplay; }
+int ASAP_get_stereo() { return sap_stereo; }
+int ASAP_get_type() { return sap_type; }
+void ASAP_set_reg_output() { sap_reg_output = 1; }
+
 static int load_native(const unsigned char *module, unsigned int module_len,
                        const unsigned char *player, char type)
 {
@@ -593,7 +603,7 @@
 	*retval = 0;
 	while (**ps != 0x0d) {
 		char c;
-		if (++chars > 3)
+		if (++chars > 4)
 			return FALSE;
 		c = (char) *(*ps)++;
 		*retval *= 10;
@@ -620,6 +630,16 @@
 		sap_ptr += 2;
 		if (sap_ptr[0] == 0xff)
 			break;
+		if (sap_ptr[0] == '\n')
+		{
+			sap_ptr ++;
+			break;
+		}
+		if (sap_ptr[0] == '\r' && sap_ptr[1] == '\n' )
+		{
+			sap_ptr += 2;
+			break;
+		}
 		if (tag_matches("TYPE ", sap_ptr, sap_end)) {
 			sap_ptr += 5;
 			sap_type = *sap_ptr++;
@@ -651,7 +671,24 @@
 		}
 		else if (tag_matches("FASTPLAY ", sap_ptr, sap_end)) {
 			sap_ptr += 9;
-			if (!parse_dec(&sap_ptr, &sap_fastplay) || sap_fastplay < 1 || sap_fastplay > 312)
+			if (!parse_dec(&sap_ptr, &sap_fastplay) || sap_fastplay < 1 )
+				return FALSE;
+		}
+		else if (tag_matches("BPM ", sap_ptr, sap_end)) {
+			sap_ptr += 4;
+			if (!parse_dec(&sap_ptr, &sap_fastplay) || sap_fastplay < 1 )
+				return FALSE;
+			// convert from BPM to fastplay
+			sap_fastplay = 3000 * 312 / sap_fastplay;
+		}
+		else if (tag_matches("AUDSIZE ", sap_ptr, sap_end)) {
+			sap_ptr += 8;
+			if (!parse_dec(&sap_ptr, &sap_music_audsize) || sap_music_audsize < 1 )
+				return FALSE;
+		}
+		else if (tag_matches("AUDCTL ", sap_ptr, sap_end)) {
+			sap_ptr += 7;
+			if (!parse_dec(&sap_ptr, &sap_music_audctl) || sap_music_audctl < 1 )
 				return FALSE;
 		}
 		else if (tag_matches("STEREO", sap_ptr, sap_end))
@@ -677,6 +707,15 @@
 	case 'C':
 		if (sap_player == 0xffff || sap_music == 0xffff)
 			return FALSE;
+	case 'R':
+		{
+			sap_music_length = (int)(sap_end - sap_ptr);
+			//memset(memory, 0, sizeof(memory));
+			//memcpy(memory + sap_music, sap_ptr, sap_music_length);
+			memset(music_data, 0, sizeof(music_data));
+			memcpy(music_data, sap_ptr, sap_music_length);
+		}
+			return TRUE;
 		break;
 	default:
 		return FALSE;
@@ -794,8 +833,6 @@
 	if (sap_stereo)
 		for (addr = _AUDF1 + _POKEY2; addr <= _STIMER + _POKEY2; addr++)
 			POKEY_PutByte(addr, 0);
-	blockclocks = 0;
-	blockclocks_per_player = 114U * sap_fastplay * block_rate;
 	regP = 0x30;
 	switch (sap_type) {
 	case 'B':
@@ -814,6 +851,9 @@
 		regX = (UBYTE) song;
 		call_6502((UWORD) (sap_player + 3), SCANLINES_FOR_INIT);
 		break;
+	case 'R':
+		if(sap_music_audctl)
+		POKEY_PutByte(_AUDCTL, sap_music_audctl);
 	case 'm':
 		regA = 0x00;
 		regX = (UBYTE) (sap_music >> 8);
@@ -843,22 +883,119 @@
 	}
 }
 
-void ASAP_Generate(void *buffer, unsigned int buffer_len)
+static int ASAP_AllZeroAUDF()
+{
+	return (AUDF[0] == 0 && AUDF[1] == 0 && AUDF[2] == 0
+	 && AUDF[3] == 0);
+}
+
+void ASAP_SetZeroLimit(int limit)
+{
+	sap_zero = 0;
+	sap_zero_limit = limit;
+}
+
+static int ASAP_Cycle()
+{
+	int i, p;
+
+	switch (sap_type) {
+	case 'B':
+		call_6502(sap_player, sap_fastplay);
+		break;
+	case 'C':
+		call_6502((UWORD) (sap_player + 6), sap_fastplay);
+	case 'R':
+		if(sap_music_offset >= sap_music_length) return 0;
+
+		int s = sap_music_audsize;
+		for(p = 0; s > 0 && p < MAXPOKEYS; p++)
+		{
+			for(i = 0; s > 0 && i < 4; i++)
+			{
+//					printf("%02x%02x",  music_data[sap_music_offset], music_data[sap_music_offset+1]);
+				POKEY_PutByte(p*_POKEY2+i*2, music_data[sap_music_offset++]);
+				s--;
+				if(!s) break;
+				POKEY_PutByte(p*_POKEY2+i*2+1, music_data[sap_music_offset++]);
+				s--;
+			}
+//printf("\n");
+			if(s) { POKEY_PutByte(p*_POKEY2+8, music_data[sap_music_offset++]); s--; }
+		}
+		break;
+	case 'm':
+	case 'r':
+	case 'T':
+		call_6502((UWORD) (sap_player + 3), sap_fastplay);
+		break;
+	case 't':
+		if (--tmc_per_frame_counter <= 0) {
+			tmc_per_frame_counter = tmc_per_frame;
+			call_6502((UWORD) (sap_player + 3), sap_fastplay);
+		}
+		else
+			call_6502((UWORD) (sap_player + 6), sap_fastplay);
+		break;
+	}
+	random_scanline_counter = (random_scanline_counter + LINE_C * sap_fastplay)
+		                          % ((AUDCTL[0] & POLY9) ? POLY9_SIZE : POLY17_SIZE);
+	if(sap_type != 'R' && sap_zero_limit > 0 && ASAP_AllZeroAUDF())
+	{
+		sap_zero++;
+		if(sap_zero > sap_zero_limit) return 0;
+	}
+	else
+	{
+		sap_zero=0;
+	}
+	return 1;
+}
+
+int ASAP_GenerateR(void *buffer, unsigned int buffer_len)
+{
+	int ret = 0;
+	int i, p;
+
+	while(buffer_len >= (9 << sap_stereo))
+	{
+		if(!ASAP_Cycle()) break;
+
+		for(p = 0; p < 1 + sap_stereo; p++)
+		{
+			for(i = 0; i < 4; i++)
+			{
+				((unsigned char *)buffer)[ret++] = AUDF[p*4+i];
+				((unsigned char *)buffer)[ret++] = AUDC[p*4+i];
+			}
+			((unsigned char *)buffer)[ret++] = AUDCTL[p];
+		}
+		buffer_len -= (9 << sap_stereo);
+	}
+	return ret;
+}
+
+int ASAP_Generate(void *buffer, unsigned int buffer_len)
 {
+	int ret = 0;
+	int samples;
+
+	if(sap_reg_output)
+		return ASAP_GenerateR(buffer, buffer_len);
+
 	/* convert number of bytes to number of blocks */
 	buffer_len >>= sample_16bit + enable_stereo;
-	if (buffer_len == 0U)
-		return;
-	for (;;) {
-		unsigned int blocks = blockclocks / ASAP_MAIN_CLOCK;
-		if (blocks != 0U) {
-			unsigned int samples;
-			if (blocks > buffer_len)
-				blocks = buffer_len;
-			buffer_len -= blocks;
-			samples = blocks << enable_stereo;
-			blockclocks -= blocks * ASAP_MAIN_CLOCK;
-			Pokey_process(buffer, samples);
+
+	samples = block_rate / 50 * (1.0*sap_fastplay/312);
+	samples <<= enable_stereo;
+
+	while(buffer_len >= samples)
+	{
+		if(!ASAP_Cycle()) break;
+		
+		Pokey_process(buffer, samples);
+
+		ret += samples << sample_16bit;
 			/* swap bytes in non-native words if necessary */
 			if (sample_format ==
 #ifdef WORDS_BIGENDIAN
@@ -876,34 +1013,9 @@
 					p += 2;
 				} while (--n != 0U);
 			}
-			if (buffer_len == 0U)
-				return;
-			buffer = (void *) ((unsigned char *) buffer +
-				(samples << sample_16bit));
-		}
-		switch (sap_type) {
-		case 'B':
-			call_6502(sap_player, sap_fastplay);
-			break;
-		case 'C':
-			call_6502((UWORD) (sap_player + 6), sap_fastplay);
-			break;
-		case 'm':
-		case 'r':
-		case 'T':
-			call_6502((UWORD) (sap_player + 3), sap_fastplay);
-			break;
-		case 't':
-			if (--tmc_per_frame_counter <= 0) {
-				tmc_per_frame_counter = tmc_per_frame;
-				call_6502((UWORD) (sap_player + 3), sap_fastplay);
-			}
-			else
-				call_6502((UWORD) (sap_player + 6), sap_fastplay);
-			break;
-		}
-		random_scanline_counter = (random_scanline_counter + LINE_C * sap_fastplay)
-		                          % ((AUDCTL[0] & POLY9) ? POLY9_SIZE : POLY17_SIZE);
-		blockclocks += blockclocks_per_player;
+break;
+		buffer_len -= samples;
+		buffer += (samples << sample_16bit);
 	}
+	return ret;
 }
diff -ru asap-0.2.1/asap/asap.h asap-0.2.1-typerio/asap/asap.h
--- asap-0.2.1/asap/asap.h	2006-01-21 00:58:23.000000000 -0800
+++ asap-0.2.1-typerio/asap/asap.h	2006-12-08 08:37:04.000000000 -0800
@@ -107,7 +107,14 @@
    You must call ASAP_PlaySong() before this function.
    Normally you use a buffer of a few kilobytes or less,
    and call ASAP_Generate() in a loop or via a callback. */
-void ASAP_Generate(void *buffer, unsigned int buffer_len);
+int ASAP_Generate(void *buffer, unsigned int buffer_len);
+
+int ASAP_get_fastplay();
+int ASAP_get_stereo();
+int ASAP_get_type();
+void ASAP_set_reg_output();
+void ASAP_SetZeroLimit(int limit);
+ 
 
 #ifdef __cplusplus
 }
